class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        map<int, int> hashmap;
        for(int i=0 ; i<intervals.size() ; i++)
        {
            hashmap[intervals[i][0]] = max(hashmap[intervals[i][0]], intervals[i][1]);
        }
        intervals.clear();
        for(auto i : hashmap)
        {
            intervals.push_back({i.first, i.second});
        }
        for(int i=0 ; i<intervals.size()-1 ; i++)
        {
            if(i+1 == intervals.size())
                break;
            if(intervals[i][1] >= intervals[i+1][0] and intervals[i][1] < intervals[i+1][1])
            {
                if(intervals[i][0] < intervals[i+1][0])
                {
                    intervals[i][1] = intervals[i+1][1];
                    intervals.erase(intervals.begin()+i+1);
                }
                else
                {
                    intervals[i][0] = intervals[i+1][0];
                    intervals[i][1] = intervals[i+1][1];
                    intervals.erase(intervals.begin()+i+1);
                }
                i--;
                continue;
            }
            if(intervals[i][1] >= intervals[i+1][1])
            {
                if(intervals[i][0] > intervals[i+1][1])
                {
                    continue;
                }
                else
                {
                    if(intervals[i][0] > intervals[i+1][0])
                    {
                        intervals[i][0] = intervals[i+1][0];
                        intervals.erase(intervals.begin()+i+1);
                    }
                    else
                        intervals.erase(intervals.begin()+i+1);
                }
                i--;
                continue;
            }
        }
        return intervals;
    }
};