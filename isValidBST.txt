/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> c;
    void travel(TreeNode* root)
    {
        if(root!=NULL)
        {
            travel(root->left);
            c.push_back(root->val);
            //cout << root->val << " ";
            travel(root->right);
        }
        else
            return;
    }
    bool part1(TreeNode* root)
    {
        if(root == NULL)
            return true;
        if(!root->left and !root->right)
            return true;
        else
        {
            if((root->left and root->left->val>=root->val) or (root->right and root->right->val<=root->val))
                return false;
            else
                return part1(root->left) and part1(root->right);
        }
    }
    bool part2(TreeNode* root)
    {
        cout << "v";
        c.clear();
        travel(root);
        for(int i=0 ; i<c.size()-1 ; i++)
        {
            if(c[i] >= c[i+1])
                return false;
        }
        return true;
    }
    bool isValidBST(TreeNode* root) {
        return part1(root) and part2(root);
    }
};
